#!/usr/bin/env node

/**
 * Zone News Bot - Enhanced Startup
 * Premium AI-Powered News Aggregation & Distribution System
 */

require('dotenv').config();
const { ServiceRegistry } = require('./services/ServiceRegistry');
const appConfig = require('./config/AppConfig');
const logger = require('./config/logger');
const zoneLogger = require('./config/zoneLogger');
const envValidator = require('./utils/envValidator');
const errorHandler = require('./utils/errorHandler');
const mongoose = require('mongoose');
const { initializeRedisSync } = require('./config/redisSync');
const { aiConfig } = require('./config/aiConfig');
const { youtubeLimits } = require('./config/youtubeLimits');
const { initializeSentry, flushSentry } = require('./config/sentry');

// ASCII Art Banner
const banner = `
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                                                               ‚ïë
‚ïë  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó    ‚ñà‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïó    ‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ïë
‚ïë  ‚ïö‚ïê‚ïê‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù    ‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ñà‚ñà‚ïë    ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ïë
‚ïë    ‚ñà‚ñà‚ñà‚ïî‚ïù ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó      ‚ñà‚ñà‚ïî‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ïë ‚ñà‚ïó ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ïë
‚ïë   ‚ñà‚ñà‚ñà‚ïî‚ïù  ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù      ‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë‚ïö‚ïê‚ïê‚ïê‚ïê‚ñà‚ñà‚ïë‚ïë
‚ïë  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë ‚ïö‚ñà‚ñà‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó    ‚ñà‚ñà‚ïë ‚ïö‚ñà‚ñà‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ïö‚ñà‚ñà‚ñà‚ïî‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë‚ïë
‚ïë  ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù    ‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïê‚ïù‚ïö‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚ïë
‚ïë                                                               ‚ïë
‚ïë              üöÄ Premium News Bot - Powered by AI üöÄ            ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
`;

// Determine environment
const isProduction = process.env.NODE_ENV === 'production';
const isDevelopment = !isProduction;

async function startZoneService() {
  const startTime = Date.now();
  
  try {
    console.log('\x1b[36m%s\x1b[0m', banner);
    
    // Validate environment variables first
    logger.info('üîç Validating environment variables...');
    const envResult = envValidator.validateOrExit();
    
    // Initialize Sentry monitoring (optional)
    if (process.env.SENTRY_DSN) {
      logger.info('üö® Initializing error monitoring...');
      initializeSentry();
    } else {
      logger.info('   ‚ö™ Error monitoring disabled (no SENTRY_DSN)');
    }
    
    // Startup info
    zoneLogger.startup('üî• Zone Premium News Service Starting üî•', {
      version: '2.0.0',
      nodeVersion: process.version,
      platform: process.platform,
      pid: process.pid,
      memoryMB: Math.round(process.memoryUsage().heapUsed / 1024 / 1024),
      environment: appConfig.get('app.environment'),
      mode: isProduction ? 'PRODUCTION' : 'DEVELOPMENT'
    });
    
    // Validate configuration
    zoneLogger.info('üîç Validating configuration...');
    const requiredConfigs = [
      'bot.token',
      'database.mongodb.uri'
    ];
    
    const missing = requiredConfigs.filter(key => !appConfig.get(key));
    if (missing.length > 0) {
      throw new Error(`Missing required configuration: ${missing.join(', ')}`);
    }
    zoneLogger.info('   ‚úÖ Configuration validated');
    
    // Connect to MongoDB
    zoneLogger.info('üóÑÔ∏è  Connecting to MongoDB...');
    await mongoose.connect(
      appConfig.get('database.mongodb.uri'),
      appConfig.get('database.mongodb.options')
    );
    zoneLogger.info('   ‚úÖ MongoDB connected');
    
    // Initialize Redis with sync
    zoneLogger.info('üìÆ Initializing Redis with sync capabilities...');
    const redisSync = await initializeRedisSync();
    const syncStatus = redisSync.getSyncStatus();
    zoneLogger.info(`   ‚úÖ Redis initialized (Dev: ${syncStatus.devConnected}, Sync: ${syncStatus.syncEnabled})`);
    
    // Initialize service registry
    zoneLogger.info('üöÄ Initializing core services...');
    ServiceRegistry.initialize();
    
    // Register new services
    ServiceRegistry.register('formattingService', () => {
      const FormattingService = require('./services/formattingService');
      return new FormattingService();
    });
    
    ServiceRegistry.register('autoPostingService', () => {
      const AutoPostingService = require('./services/autoPostingService');
      return new AutoPostingService();
    });
    
    // Get and initialize bot service
    const telegramBotService = ServiceRegistry.get('bot');
    await telegramBotService.initialize();
    console.log('   ‚úÖ Telegram Bot initialized');
    
    // Initialize premium services
    const enhancedNewsService = ServiceRegistry.get('enhancedNewsService');
    const subscriptionService = ServiceRegistry.get('subscriptionService');
    const formattingService = ServiceRegistry.get('formattingService');
    const autoPostingService = ServiceRegistry.get('autoPostingService');
    const autoUpdateService = ServiceRegistry.get('autoUpdateService');
    
    // Initialize payment and monetization services
    const telegramPaymentService = ServiceRegistry.get('telegramPaymentService');
    await telegramPaymentService.initialize(telegramBotService.bot);
    console.log('   ‚úÖ Telegram Stars payment service initialized');
    
    const reactionTrackingService = ServiceRegistry.get('reactionTrackingService');
    await reactionTrackingService.initialize(telegramBotService.bot);
    console.log('   ‚úÖ Reaction tracking service initialized');
    
    const affiliateService = ServiceRegistry.get('affiliateService');
    await affiliateService.initialize();
    console.log('   ‚úÖ Affiliate management service initialized');
    
    // Initialize logger channel service
    const LoggerChannelService = require('./services/loggerChannelService');
    const loggerChannelService = new LoggerChannelService(telegramBotService.bot);
    await loggerChannelService.initialize();
    telegramBotService.bot.loggerChannel = loggerChannelService;
    
    // Initialize webhook service if configured (always prefer webhook)
    if (process.env.TELEGRAM_WEBHOOK_URL) {
      const WebhookService = require('./services/webhookService');
      const webhookService = new WebhookService(telegramBotService.bot);
      await webhookService.start();
      console.log('   ‚úÖ Webhook service started');
      
      // Set webhook if in production
      if (isProduction) {
        await webhookService.setWebhook(
          process.env.TELEGRAM_WEBHOOK_URL,
          process.env.TELEGRAM_WEBHOOK_SECRET
        );
      }
    } else {
      console.log('   ‚ö†Ô∏è TELEGRAM_WEBHOOK_URL not set; webhook server not started');
    }
    
    // Initialize services
    await autoUpdateService.initialize();
    await autoPostingService.initialize();
    console.log('   ‚úÖ Premium services initialized');
    
    // Get bot info
    const botInfo = telegramBotService.bot.me;
    console.log(`   ü§ñ Bot: @${botInfo.username} (${botInfo.id})`);
    
    // Test connectivity
    console.log('\nüß™ Testing system connectivity...');
    await testSystemConnectivity(telegramBotService.bot);
    
    // Display Intelligence Engine configuration
    console.log('\nüß† Intelligence Engine Configuration:');
    console.log(`   ‚Ä¢ Provider: Advanced Language Processing`);
    console.log(`   ‚Ä¢ Features: Smart Summaries, Content Enhancement, Grammar Perfection`);
    console.log(`   ‚Ä¢ Optimization: Resource-efficient processing per tier`);
    console.log(`   ‚Ä¢ Estimated operational cost: $${aiConfig.revenueAnalysis.projectedMonthly.aiCosts.total}`);
    
    // In production, start automated services
    if (isProduction) {
      console.log('\n‚è∞ Starting automated services...');
      const postingScheduler = ServiceRegistry.get('postingScheduler');
      postingScheduler.start();
      console.log('   ‚úÖ Auto-posting scheduler started');
      
      // Set up periodic tasks
      setInterval(async () => {
        await autoUpdateService.cleanupExpired();
        await subscriptionService.checkExpiredSubscriptions();
      }, 24 * 60 * 60 * 1000); // Daily
    } else {
      console.log('\n‚è∞ Manual mode - Use admin commands to control services');
    }
    
    // Display startup complete
    const totalStartupTime = Date.now() - startTime;
    console.log(`\n‚ú® Zone Premium Service is LIVE! (${totalStartupTime}ms) ‚ú®`);
    
    // Display minimal startup info
    console.log('\n‚úÖ Zone News Bot is ready!');
    console.log('\nüì± Bot: @' + telegramBotService.bot.me.username);
    console.log('üí° Type /help in Telegram for commands');
    console.log('üöÄ Type /subscribe to unlock premium features');
    
    // Display webhook info if configured
    if (process.env.TELEGRAM_WEBHOOK_URL) {
      console.log('üåê Webhook: ' + process.env.TELEGRAM_WEBHOOK_URL.replace(/\/webhook$/, ''));
    }
    console.log('\n');
    
    // Setup monitoring
    setupMonitoring();
    
    // Graceful shutdown handlers
    setupShutdownHandlers();
    
  } catch (error) {
    console.error('‚ùå Failed to start Zone service:', error);
    logger.error('Startup failed:', error);
    // Only capture error if Sentry is available
    const { captureError } = require('./config/sentry');
    if (captureError) {
      captureError(error, { context: 'startup' });
    }
    process.exit(1);
  }
}

/**
 * Display enhanced command menu
 */
function displayCommandMenu() {
  console.log('\n');
  console.log('‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó');
  console.log('‚ïë                                                                       ‚ïë');
  console.log('‚ïë                    üöÄ ZONE NEWS BOT COMMANDS üöÄ                       ‚ïë');
  console.log('‚ïë                                                                       ‚ïë');
  console.log('‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù');
  
  console.log('\n');
  console.log('  üì± ESSENTIAL COMMANDS\n');
  console.log('    /start        ‚Üí  Welcome & quick start guide');
  console.log('    /help         ‚Üí  Interactive help center');
  console.log('    /subscribe    ‚Üí  üåü Unlock premium features');
  console.log('    /profile      ‚Üí  Your personal dashboard\n');
  
  console.log('\n');
  console.log('  üì∞ NEWS & CONTENT\n');
  console.log('    /news         ‚Üí  Latest breaking news (10 free/day)');
  console.log('    /trending     ‚Üí  üî• What everyone\'s reading');
  console.log('    /search       ‚Üí  Find specific topics');
  console.log('    /categories   ‚Üí  Browse by interest\n');
  
  console.log('\n');
  console.log('  ‚öôÔ∏è  PERSONALIZATION\n');
  console.log('    /settings     ‚Üí  Customize your experience');
  console.log('    /language     ‚Üí  üåç 15+ languages available');
  console.log('    /timezone     ‚Üí  Set your local time');
  console.log('    /style        ‚Üí  Choose display format\n');
  
  console.log('\n');
  console.log('  üíé PREMIUM FEATURES\n');
  console.log('    /preview      ‚Üí  üì¢ Early access (30-60 min)');
  console.log('    /group        ‚Üí  Auto-post to your groups');
  console.log('    /analytics    ‚Üí  üìä Performance insights');
  console.log('    /api          ‚Üí  Developer integration');
  console.log('    /template     ‚Üí  Custom news templates\n');
  
  console.log('\n');
  console.log('  üí∞ EARN & SAVE\n');
  console.log('    /referral     ‚Üí  üí∏ Earn 20% lifetime commission');
  console.log('    /promo        ‚Üí  Apply discount codes');
  console.log('    /achievements ‚Üí  Unlock rewards & perks\n');
  
  console.log('\n');
  console.log('‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê');
  console.log('‚îÇ  üí° PRO TIP: Type /subscribe to unlock 5x more news & premium tools!  ‚îÇ');
  console.log('‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò');
  console.log('\n');
}

/**
 * Display feature status
 */
function displayFeatureStatus() {
  console.log('\n‚ö° Feature Status:');
  
  // Secure feature status without exposing API keys
  const features = {
    'üì∞ News API': process.env.NEWS_API_KEY ? '‚úÖ Configured' : '‚ùå Not configured',
    'üß† Intelligence Engine': process.env.OPENROUTER_API_KEY ? '‚úÖ Ready' : '‚ùå Not configured',
    '‚ö° Groq Engine': process.env.GROQ_API_KEY ? '‚úÖ Ultra-fast ready' : '‚ö™ Not configured',
    'üìÆ Redis Cache': true ? '‚úÖ Active' : '‚ùå Disabled',
    'üîÑ Redis Sync': process.env.ENABLE_REDIS_SYNC === 'true' ? '‚úÖ Enabled' : '‚ö™ Standalone',
    'üìù Grammar Enhancement': '‚úÖ Active',
    'üåç Geo-Language': '‚úÖ Active (AU Default)',
    'üí≥ Payments': process.env.STRIPE_SECRET_KEY ? '‚úÖ Stripe' : '‚ö™ Manual',
    'üìä Analytics': '‚úÖ Enabled',
    'üéØ Staging Channel': process.env.TELEGRAM_CHANNEL_A_ID ? '‚úÖ Configured' : '‚ùå Not set',
    'üì¢ Public Channel': process.env.TELEGRAM_CHANNEL_B_ID ? '‚úÖ Configured' : '‚ùå Not set'
  };
  
  Object.entries(features).forEach(([feature, status]) => {
    console.log(`  ${feature}: ${status}`);
  });
}

/**
 * Display pricing tiers with features
 */
function displayPricingTiers() {
  console.log('\n');
  console.log('‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó');
  console.log('‚ïë                    üíé SUBSCRIPTION PLANS üíé                           ‚ïë');
  console.log('‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù');
  
  console.log('\n‚îå‚îÄ‚îÄ‚îÄ üÜì FREE TIER ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê');
  console.log('‚îÇ                                                                       ‚îÇ');
  console.log('‚îÇ  ‚úì 10 news articles daily            ‚úì Basic categories              ‚îÇ');
  console.log('‚îÇ  ‚úì 2 YouTube summaries               ‚úì Standard support              ‚îÇ');
  console.log('‚îÇ                                                                       ‚îÇ');
  console.log('‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò');
  
  console.log('\n‚îå‚îÄ‚îÄ‚îÄ üöÄ PRO ‚îÇ 300 Stars/mo (~$5.55) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê');
  console.log('‚îÇ                                                                       ‚îÇ');
  console.log('‚îÇ  ‚úì 50 articles daily (5x more!)      ‚úì 30-60 min early access       ‚îÇ');
  console.log('‚îÇ  ‚úì Group auto-posting                ‚úì AI-powered summaries         ‚îÇ');
  console.log('‚îÇ  ‚úì Custom templates                  ‚úì Remove ads                   ‚îÇ');
  console.log('‚îÇ  ‚úì Priority notifications            ‚úì Value: $1,285/mo for $5.55!  ‚îÇ');
  console.log('‚îÇ                                                                       ‚îÇ');
  console.log('‚îÇ                    üéØ MOST POPULAR CHOICE                             ‚îÇ');
  console.log('‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò');
  
  console.log('\n‚îå‚îÄ‚îÄ‚îÄ üíº BUSINESS ‚îÇ 1,350 Stars/mo (~$25) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê');
  console.log('‚îÇ                                                                       ‚îÇ');
  console.log('‚îÇ  ‚úì 200 articles daily                ‚úì Full API access              ‚îÇ');
  console.log('‚îÇ  ‚úì Analytics dashboard               ‚úì Geo-language targeting       ‚îÇ');
  console.log('‚îÇ  ‚úì Custom branding                   ‚úì Priority support             ‚îÇ');
  console.log('‚îÇ  ‚úì Export data (CSV/JSON)            ‚úì Webhook integration          ‚îÇ');
  console.log('‚îÇ  ‚úì Value: $2,945/mo for just $25!                                    ‚îÇ');
  console.log('‚îÇ                                                                       ‚îÇ');
  console.log('‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò');
  
  console.log('\n‚îå‚îÄ‚îÄ‚îÄ üè¢ ENTERPRISE ‚îÇ 5,400 Stars/mo (~$100) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê');
  console.log('‚îÇ                                                                       ‚îÇ');
  console.log('‚îÇ  ‚úì UNLIMITED everything              ‚úì 10 team seats                ‚îÇ');
  console.log('‚îÇ  ‚úì White label solution              ‚úì Custom AI training           ‚îÇ');
  console.log('‚îÇ  ‚úì Monthly strategy calls            ‚úì Revenue sharing              ‚îÇ');
  console.log('‚îÇ  ‚úì Priority feature requests         ‚úì SLA guarantee                ‚îÇ');
  console.log('‚îÇ  ‚úì Value: $9,845/mo for just $100!                                   ‚îÇ');
  console.log('‚îÇ                                                                       ‚îÇ');
  console.log('‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò');
  
  console.log('\n');
  console.log('  üéÅ LIMITED TIME OFFERS:\n');
  console.log('    üèÉ Early Bird Special: Use code LAUNCH50 for 50% OFF first month!');
  console.log('    üí∞ Referral Program: Earn 20% lifetime commission');
  console.log('    ‚≠ê Lifetime Deal: $50 one-time payment (Only 1000 spots!)');
  console.log('\n');
  console.log('  Type /subscribe to get started with premium features today!');
  console.log('\n');
}

/**
 * Test system connectivity
 */
async function testSystemConnectivity(bot) {
  // Test channels
  const channels = {
    'Staging (A)': process.env.TELEGRAM_CHANNEL_A_ID,
    'Public (B)': process.env.TELEGRAM_CHANNEL_B_ID
  };
  
  for (const [name, channelId] of Object.entries(channels)) {
    if (channelId) {
      try {
        const chat = await bot.getChat(channelId);
        console.log(`   ‚úÖ ${name}: ${chat.title || chat.username || 'Connected'}`);
      } catch (error) {
        console.log(`   ‚ö†Ô∏è  ${name}: Channel setup required (add @${process.env.BOT_USERNAME} as admin)`);
      }
    } else {
      console.log(`   ‚ö†Ô∏è  ${name}: Not configured`);
    }
  }
  
  // Test Logger Channel
  const logChannelId = process.env.TELEGRAM_LOG_CHANNEL_ID;
  if (logChannelId) {
    try {
      const chat = await bot.getChat(logChannelId);
      console.log(`   ‚úÖ Logger Channel: ${chat.title || chat.username || 'Connected'}`);
    } catch (error) {
      console.log(`   ‚ùå Logger Channel: Not accessible`);
    }
  } else {
    console.log(`   ‚ö†Ô∏è  Logger Channel: Not configured`);
  }
  
  // Test Intelligence Engine
  if (process.env.OPENROUTER_API_KEY) {
    console.log(`   ‚úÖ Intelligence Engine: Connected & Ready`);
  } else {
    console.log(`   ‚ö†Ô∏è  Intelligence Engine: Not configured`);
  }
}

/**
 * Setup monitoring
 */
function setupMonitoring() {
  let heartbeatCount = 0;
  const startTime = Date.now();
  
  setInterval(() => {
    heartbeatCount++;
    const uptimeMinutes = Math.round((Date.now() - startTime) / 60000);
    const memoryMB = Math.round(process.memoryUsage().heapUsed / 1024 / 1024);
    
    // Log every 60 heartbeats (30 minutes)
    if (heartbeatCount % 60 === 0) {
      const stats = {
        uptime: `${Math.floor(uptimeMinutes / 60)}h ${uptimeMinutes % 60}m`,
        memory: `${memoryMB}MB`,
        connections: mongoose.connection.readyState === 1 ? 'OK' : 'ERR'
      };
      
      logger.debug(`Health check: Uptime ${stats.uptime}, Memory ${stats.memory}, DB ${stats.connections}`);
    }
  }, 30000); // Every 30 seconds
}

/**
 * Setup graceful shutdown
 */
function setupShutdownHandlers() {
  const shutdown = async (signal) => {
    console.log(`\nüõë Received ${signal}, shutting down gracefully...`);
    
    try {
      // Stop logger channel
      const telegramBotService = ServiceRegistry.get('bot');
      if (telegramBotService && telegramBotService.bot.loggerChannel) {
        telegramBotService.bot.loggerChannel.stop();
        console.log('   ‚úÖ Logger channel stopped');
      }
      
      // Stop services
      const autoPostingService = ServiceRegistry.get('autoPostingService');
      if (autoPostingService) {
        console.log('   ‚è∏Ô∏è  Stopping auto-posting...');
        // Stop all schedules
      }
      
      // Close connections
      await mongoose.connection.close();
      console.log('   ‚úÖ Database disconnected');
      
      const redisSync = require('./config/redisSync').getRedisSync();
      await redisSync.close();
      console.log('   ‚úÖ Redis disconnected');
      
      // Flush Sentry events
      await flushSentry();
      console.log('   ‚úÖ Error monitoring events flushed');
      
      console.log('   üëã Goodbye!');
      process.exit(0);
    } catch (error) {
      console.error('   ‚ùå Error during shutdown:', error);
      await flushSentry();
      process.exit(1);
    }
  };
  
  process.on('SIGINT', () => shutdown('SIGINT'));
  process.on('SIGTERM', () => shutdown('SIGTERM'));
  
  // Handle unhandled rejections and exceptions
  process.on('unhandledRejection', (reason, promise) => {
    // Don't crash in development for callback query timeouts
    if (reason && reason.message && reason.message.includes('query is too old')) {
      logger.warn('Ignoring expired callback query:', reason.message);
      return;
    }
    
    logger.error('Unhandled promise rejection:', reason);
    
    if (process.env.NODE_ENV === 'development') {
      logger.error('Exiting due to unhandled rejection in development');
      process.exit(1);
    } else {
      logger.error('Continuing execution in production despite unhandled rejection');
    }
  });
  
  process.on('uncaughtException', (error) => {
    logger.error('Uncaught exception:', error);
    
    if (process.env.NODE_ENV === 'development') {
      logger.error('Exiting due to uncaught exception in development');
      process.exit(1);
    } else {
      logger.error('Attempting graceful shutdown due to uncaught exception');
      shutdown('UNCAUGHT_EXCEPTION');
    }
  });
}

// Start the service
startZoneService();