version: '3.8'

services:
  # MongoDB Database
  mongodb:
    image: mongo:7.0
    container_name: zone-news-mongodb
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGODB_USERNAME:-admin}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGODB_PASSWORD:-changeme}
      MONGO_INITDB_DATABASE: zone_news_production
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
      - mongodb_config:/data/configdb
    networks:
      - zone-news-network
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/zone_news_production --quiet
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache (Optional)
  redis:
    image: redis:7-alpine
    container_name: zone-news-redis
    restart: unless-stopped
    command: redis-server --appendonly yes
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - zone-news-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3

  # Auth Service
  auth-service:
    build:
      context: ./apps/auth-service
      dockerfile: Dockerfile
    container_name: zone-news-auth
    restart: unless-stopped
    env_file:
      - .env.production
    environment:
      - NODE_ENV=production
      - AUTH_SERVICE_PORT=4001
      - MONGODB_URI=mongodb://${MONGODB_USERNAME:-admin}:${MONGODB_PASSWORD:-changeme}@mongodb:27017/zone_news_production?authSource=admin
    ports:
      - "4001:4001"
    depends_on:
      mongodb:
        condition: service_healthy
    networks:
      - zone-news-network
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:4001/health', (r) => {process.exit(r.statusCode === 200 ? 0 : 1)})"]
      interval: 30s
      timeout: 10s
      retries: 3

  # User Service
  user-service:
    build:
      context: ./apps/user-service
      dockerfile: Dockerfile
    container_name: zone-news-user
    restart: unless-stopped
    env_file:
      - .env.production
    environment:
      - NODE_ENV=production
      - USER_SERVICE_PORT=4002
      - AUTH_SERVICE_URL=http://auth-service:4001
      - MONGODB_URI=mongodb://${MONGODB_USERNAME:-admin}:${MONGODB_PASSWORD:-changeme}@mongodb:27017/zone_news_production?authSource=admin
    ports:
      - "4002:4002"
    depends_on:
      mongodb:
        condition: service_healthy
      auth-service:
        condition: service_healthy
    networks:
      - zone-news-network

  # Workflow Service
  workflow-service:
    build:
      context: ./apps/workflow-service
      dockerfile: Dockerfile
    container_name: zone-news-workflow
    restart: unless-stopped
    env_file:
      - .env.production
    environment:
      - NODE_ENV=production
      - WORKFLOW_SERVICE_PORT=4003
      - MONGODB_URI=mongodb://${MONGODB_USERNAME:-admin}:${MONGODB_PASSWORD:-changeme}@mongodb:27017/zone_news_production?authSource=admin
      - REDIS_URL=redis://redis:6379
    ports:
      - "4003:4003"
    depends_on:
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - zone-news-network

  # Channels Service
  channels-service:
    build:
      context: ./apps/channels-service
      dockerfile: Dockerfile
    container_name: zone-news-channels
    restart: unless-stopped
    env_file:
      - .env.production
    environment:
      - NODE_ENV=production
      - CHANNELS_SERVICE_PORT=4004
      - MONGODB_URI=mongodb://${MONGODB_USERNAME:-admin}:${MONGODB_PASSWORD:-changeme}@mongodb:27017/zone_news_production?authSource=admin
    ports:
      - "4004:4004"
    depends_on:
      mongodb:
        condition: service_healthy
    networks:
      - zone-news-network
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:4004/health', (r) => {process.exit(r.statusCode === 200 ? 0 : 1)})"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Settings Service
  settings-service:
    build:
      context: ./apps/settings-service
      dockerfile: Dockerfile
    container_name: zone-news-settings
    restart: unless-stopped
    env_file:
      - .env.production
    environment:
      - NODE_ENV=production
      - SETTINGS_SERVICE_PORT=4005
      - MONGODB_URI=mongodb://${MONGODB_USERNAME:-admin}:${MONGODB_PASSWORD:-changeme}@mongodb:27017/zone_news_production?authSource=admin
    ports:
      - "4005:4005"
    depends_on:
      mongodb:
        condition: service_healthy
    networks:
      - zone-news-network

  # Analytics Service
  analytics-service:
    build:
      context: ./apps/analytics-service
      dockerfile: Dockerfile
    container_name: zone-news-analytics
    restart: unless-stopped
    env_file:
      - .env.production
    environment:
      - NODE_ENV=production
      - ANALYTICS_SERVICE_PORT=4006
      - MONGODB_URI=mongodb://${MONGODB_USERNAME:-admin}:${MONGODB_PASSWORD:-changeme}@mongodb:27017/zone_news_production?authSource=admin
    ports:
      - "4006:4006"
    depends_on:
      mongodb:
        condition: service_healthy
    networks:
      - zone-news-network
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:4006/health', (r) => {process.exit(r.statusCode === 200 ? 0 : 1)})"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Subscription Service (Telegram Stars)
  subscription-service:
    build:
      context: ./apps/subscription-service
      dockerfile: Dockerfile
    container_name: zone-news-subscription
    restart: unless-stopped
    env_file:
      - .env.production
    environment:
      - NODE_ENV=production
      - SUBSCRIPTION_SERVICE_PORT=4007
      - MONGODB_URI=mongodb://${MONGODB_USERNAME:-admin}:${MONGODB_PASSWORD:-changeme}@mongodb:27017/zone_news_production?authSource=admin
      - TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN}
      - ADMIN_TOKEN=${ADMIN_TOKEN}
    ports:
      - "4007:4007"
    depends_on:
      mongodb:
        condition: service_healthy
    networks:
      - zone-news-network
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:4007/health', (r) => {process.exit(r.statusCode === 200 ? 0 : 1)})"]
      interval: 30s
      timeout: 10s
      retries: 3

  # API Gateway
  api-gateway:
    build:
      context: ./apps/api
      dockerfile: Dockerfile
    container_name: zone-news-api
    restart: unless-stopped
    env_file:
      - .env.production
    environment:
      - NODE_ENV=production
      - PORT=3001
      - MONGODB_URI=mongodb://${MONGODB_USERNAME:-admin}:${MONGODB_PASSWORD:-changeme}@mongodb:27017/zone_news_production?authSource=admin
      - REDIS_URL=redis://redis:6379
      - AUTH_SERVICE_URL=http://auth-service:4001
      - USER_SERVICE_URL=http://user-service:4002
      - WORKFLOW_SERVICE_URL=http://workflow-service:4003
      - CHANNELS_SERVICE_URL=http://channels-service:4004
      - SETTINGS_SERVICE_URL=http://settings-service:4005
      - ANALYTICS_SERVICE_URL=http://analytics-service:4006
      - SUBSCRIPTION_SERVICE_URL=http://subscription-service:4007
    ports:
      - "3001:3001"
    depends_on:
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
      auth-service:
        condition: service_healthy
      channels-service:
        condition: service_healthy
      analytics-service:
        condition: service_healthy
      subscription-service:
        condition: service_healthy
    networks:
      - zone-news-network
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3001/health', (r) => {process.exit(r.statusCode === 200 ? 0 : 1)})"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Telegram Bot
  telegram-bot:
    build:
      context: ./apps/bot
      dockerfile: Dockerfile
    container_name: zone-news-bot
    restart: unless-stopped
    env_file:
      - .env.production
    environment:
      - NODE_ENV=production
      - WEBHOOK_PORT=3002
      - TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN}
      - MONGODB_URI=mongodb://${MONGODB_USERNAME:-admin}:${MONGODB_PASSWORD:-changeme}@mongodb:27017/zone_news_production?authSource=admin
      - WEBHOOK_URL=${WEBHOOK_URL}
      - API_URL=http://api-gateway:3001
    ports:
      - "3002:3002"
    depends_on:
      mongodb:
        condition: service_healthy
      api-gateway:
        condition: service_healthy
    networks:
      - zone-news-network
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3002/health', (r) => {process.exit(r.statusCode === 200 ? 0 : 1)})"]
      interval: 30s
      timeout: 10s
      retries: 3

networks:
  zone-news-network:
    driver: bridge

volumes:
  mongodb_data:
    driver: local
  mongodb_config:
    driver: local
  redis_data:
    driver: local
